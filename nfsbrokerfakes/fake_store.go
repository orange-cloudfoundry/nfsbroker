// This file was generated by counterfeiter
package nfsbrokerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/nfsbroker/nfsbroker"
)

type FakeStore struct {
	RestoreStub        func(logger lager.Logger, state *nfsbroker.DynamicState) error
	restoreMutex       sync.RWMutex
	restoreArgsForCall []struct {
		logger lager.Logger
		state  *nfsbroker.DynamicState
	}
	restoreReturns struct {
		result1 error
	}
	SaveStub        func(logger lager.Logger, state *nfsbroker.DynamicState, instanceId, bindingId string) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		logger     lager.Logger
		state      *nfsbroker.DynamicState
		instanceId string
		bindingId  string
	}
	saveReturns struct {
		result1 error
	}
	CleanupStub        func() error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct{}
	cleanupReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) Restore(logger lager.Logger, state *nfsbroker.DynamicState) error {
	fake.restoreMutex.Lock()
	fake.restoreArgsForCall = append(fake.restoreArgsForCall, struct {
		logger lager.Logger
		state  *nfsbroker.DynamicState
	}{logger, state})
	fake.recordInvocation("Restore", []interface{}{logger, state})
	fake.restoreMutex.Unlock()
	if fake.RestoreStub != nil {
		return fake.RestoreStub(logger, state)
	}
	return fake.restoreReturns.result1
}

func (fake *FakeStore) RestoreCallCount() int {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return len(fake.restoreArgsForCall)
}

func (fake *FakeStore) RestoreArgsForCall(i int) (lager.Logger, *nfsbroker.DynamicState) {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return fake.restoreArgsForCall[i].logger, fake.restoreArgsForCall[i].state
}

func (fake *FakeStore) RestoreReturns(result1 error) {
	fake.RestoreStub = nil
	fake.restoreReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Save(logger lager.Logger, state *nfsbroker.DynamicState, instanceId string, bindingId string) error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		logger     lager.Logger
		state      *nfsbroker.DynamicState
		instanceId string
		bindingId  string
	}{logger, state, instanceId, bindingId})
	fake.recordInvocation("Save", []interface{}{logger, state, instanceId, bindingId})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(logger, state, instanceId, bindingId)
	}
	return fake.saveReturns.result1
}

func (fake *FakeStore) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeStore) SaveArgsForCall(i int) (lager.Logger, *nfsbroker.DynamicState, string, string) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].logger, fake.saveArgsForCall[i].state, fake.saveArgsForCall[i].instanceId, fake.saveArgsForCall[i].bindingId
}

func (fake *FakeStore) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Cleanup() error {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct{}{})
	fake.recordInvocation("Cleanup", []interface{}{})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub()
	}
	return fake.cleanupReturns.result1
}

func (fake *FakeStore) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeStore) CleanupReturns(result1 error) {
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nfsbroker.Store = new(FakeStore)
